 /*-----------------------------------------------------------------------------------------
 LIBRARY: SSME_EXPERIMENTS
 COMPONENT: Junction
 PARTITION: DesignCompresible
 EXPERIMENT: exp1
 TEMPLATE: STEADY
 CREATION DATE: 01/03/2019
-----------------------------------------------------------------------------------------*/

EXPERIMENT exp1 ON Junction.DesignCompresible
   DECLS
	
	REAL gamma_out
	REAL gamma_in1
	REAL gamma_in2
	
	REAL Rg_out
	REAL Rg_in1
	REAL Rg_in2
	
	REAL rho_out
	REAL rho_in1
	REAL rho_in2
	
	REAL E
	REAL E_1
	REAL E_2
	
	REAL h_out
	REAL h_in1
	REAL h_in2
	
	REAL M_z
	
	REAL V_media
	
	
   OBJECTS
   INIT
      -- initial values for algebraics
      Junction_la_buena_1.M_in2 = 0.5
      Junction_la_buena_1.M_out = 0.5

   BOUNDS
      -- Set equations for boundaries: boundVar = f(TIME;...)
      Inlet_1.Tt = 247.900
      Inlet_1.pt = 21311703
      Inlet_2.Tt = 905.74
      Inlet_2.pt = 21311703
      Junction_la_buena_1.M_in1 = 0.1
      Junction_la_buena_1.f_in1.W = 13.43
      Junction_la_buena_1.f_in2.W = 117.43

   BODY
      -- report results in file reportAll.rpt
      REPORT_LIST("reportAll","*",TRUE)

      DEBUG_LEVEL= 1      -- Range 0..4
      -- Settings for different actions. Valid actions are: SEV_DISABLE, SEV_NONE, SEV_WARNING, SEV_ERROR, SEV_KILLPOINT and SEV_FATALL
      --eSetErrorAction(ERR_BAD_OPER,SEV_KILLPOINT) -- Detect bad numerical operations (eg division by zero), default is SEV_NONE, recommended is SEV_KILLPOINT
      --eSetErrorAction(ERR_NAN_INF, SEV_KILLPOINT) -- Detect NaN or Inf values, default is SEV_NONE, recommended is SEV_KILLPOINT
      TOLTYPE= RELTOL -- convergence criteria
      TOLERANCE = 1e-06 -- steady solver relative tolerance 

      -- Call the steady state function
      STEADY()
		
		gamma_out = gamma(Junction_la_buena_1.f_out.fluid)
		gamma_in1 = gamma(Junction_la_buena_1.f_in1.fluid)
		gamma_in2 = gamma(Junction_la_buena_1.f_in2.fluid)
		
		Rg_out =  R(Junction_la_buena_1.f_out.fluid)
		Rg_in1 =  R(Junction_la_buena_1.f_in1.fluid)
		Rg_in2 =  R(Junction_la_buena_1.f_in2.fluid)
		
		rho_out = Junction_la_buena_1.p_out / (Rg_out * Junction_la_buena_1.T_out)
		rho_in1 = Junction_la_buena_1.p_in1 / (Rg_in1 * Junction_la_buena_1.T_in1)
		rho_in2 = Junction_la_buena_1.p_in2 / (Rg_in2 * Junction_la_buena_1.T_in2)
		
		
		h_out =  gamma_out/(gamma_out-1) * Junction_la_buena_1.p_out / rho_out 
		h_in1 =  gamma_in1/(gamma_in1-1) * Junction_la_buena_1.p_in1 / rho_in1 
		h_in2 =  gamma_in2/(gamma_in2-1) * Junction_la_buena_1.p_in2 / rho_in2 
		
		E_1 = (h_in1 + 0.5 * Junction_la_buena_1.V_in1**2) * rho_in1 * Junction_la_buena_1.V_in1 * Junction_la_buena_1.A_in1
		E_2 = (h_in2 + 0.5 * Junction_la_buena_1.V_in2**2) * rho_in2 * Junction_la_buena_1.V_in2 * Junction_la_buena_1.A_in2
		E = E_1 + E_2
		
		M_z = Junction_la_buena_1.A_in1 * (rho_in1 * Junction_la_buena_1.V_in1**2 + Junction_la_buena_1.p_in1) + Junction_la_buena_1.A_in2 * (rho_in2 * Junction_la_buena_1.V_in2**2 + Junction_la_buena_1.p_in2)


		V_media = gamma_out / (gamma_out + 1) * M_z / Junction_la_buena_1.f_out.W - sqrt( (gamma_out / (gamma_out + 1) * M_z / Junction_la_buena_1.f_out.W)**2 - 2 * (gamma_out-1) / (gamma_out+1) * E / Junction_la_buena_1.f_out.W  )
		
		
END EXPERIMENT
